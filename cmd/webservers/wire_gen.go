// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"gorm.io/gorm"
	"orders/actions"
	"orders/model/read"
	"orders/model/write"
	"orders/rest"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func app(orderSaver write.IOrderSaver, sqlDb *sql.DB, dateFormat string, url actions.CheckoutUrl, db *gorm.DB, orderModifier write.IOrderModifier) *webApp {
	createOrder := actions.NewCreateOrder(orderSaver)
	responder := rest.NewResponder(dateFormat)
	restCreateOrder := rest.NewCreateOrder(createOrder, responder)
	iOrderItemFinderByOrderId := read.NewOrderItemFinderById(sqlDb)
	orderFinderById := read.NewOrderFinderById(sqlDb, iOrderItemFinderByOrderId)
	retrieveOrder := actions.NewRetrieveOrder(orderFinderById)
	restRetrieveOrder := rest.NewRetrieveOrder(retrieveOrder, responder)
	checkoutTransfer := actions.NewCheckoutTransfer(url)
	restCheckoutTransfer := rest.NewCheckoutTransfer(checkoutTransfer, retrieveOrder, responder)
	confirmPayment := actions.NewConfirmPayment(orderSaver, db)
	restConfirmPayment := rest.NewConfirmPayment(confirmPayment, responder)
	orderFinderActiveById := read.NewOrderFinderActiveById(sqlDb)
	productAdder := actions.NewProductAdder(orderModifier, orderFinderActiveById)
	addProduct := rest.NewAddProduct(productAdder, responder)
	productDeleter := actions.NewProductDeleter(orderModifier, orderFinderById)
	deleteProduct := rest.NewDeleteProduct(productDeleter, responder)
	mainWebApp := newWebApp(restCreateOrder, restRetrieveOrder, restCheckoutTransfer, restConfirmPayment, addProduct, deleteProduct)
	return mainWebApp
}
